import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // generated by flutterfire configure
import 'package:cloud_firestore/cloud_firestore.dart'; // <-- add
import 'CheckInPage.dart';
import 'add_student_page.dart';
import 'edit_student_page.dart';
import 'contact_info_page.dart';
import 'check_out_page.dart';


void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const CheckinApp());
}

class CheckinApp extends StatelessWidget {
  const CheckinApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wize Computing Helper App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorSchemeSeed: Colors.deepPurple,
      ),
      home: const HomePage(),
      routes: {
        CheckInPage.route: (_) => const CheckInPage(),
        AddStudentPage.route: (_) => const AddStudentPage(),
        EditStudentPage.route: (_) => const EditStudentPage(),
        CheckOutPage.route: (_) => const CheckOutPage(),
        ContactInfoPage.route: (_) => const ContactInfoPage(),
      },
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String? _selectedCollectionId;
  String? _selectedCollectionName;

  void _go(BuildContext context, String route) {
    if (_selectedCollectionId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a class first')),
      );
      return;
    }
    Navigator.of(context).pushNamed(route, arguments: {
      'id': _selectedCollectionId!,
      'name': _selectedCollectionName ?? _selectedCollectionId!,
    });
  }

  @override
  Widget build(BuildContext context) {
    final registryQuery =
        FirebaseFirestore.instance.collection('classRegistry').limit(1);

    return Scaffold(
      appBar: AppBar(title: const Text('Wize Computing Helper App')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: LayoutBuilder(
          builder: (context, constraints) {
            final isWide = constraints.maxWidth > 600;

            final classPicker = Card(
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                child: StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
                  stream: registryQuery.snapshots(),
                  builder: (context, snap) {
                    if (snap.connectionState == ConnectionState.waiting) {
                      return const LinearProgressIndicator();
                    }
                    if (snap.hasError) return Text('Error: ${snap.error}');
                    final docs = snap.data?.docs ?? [];
                    if (docs.isEmpty) return const Text('No classes found');

                    final data = docs.first.data();
                    final ids = (data['section'] as List<dynamic>? ?? []).cast<String>(); // <-- your field
                    // final namesMap = const <String, dynamic>{}; // no displayNames map in your doc

                    return DropdownButtonFormField<String>(
                      value: _selectedCollectionId,
                      decoration: const InputDecoration(
                        labelText: 'Select Class / Room',
                        border: InputBorder.none,
                      ),
                      items: [
                        for (final id in ids) DropdownMenuItem(value: id, child: Text(id)),
                      ],
                      onChanged: (id) {
                        setState(() {
                          _selectedCollectionId = id;
                          _selectedCollectionName = id;
                        });
                      },
                    );
                  },
                )
              ),
            );

            final cards = [
              _ActionCard(
                icon: Icons.login,
                label: 'Check-In',
                onTap: () => _go(context, CheckInPage.route),
              ),
              _ActionCard(
                icon: Icons.logout,
                label: 'Check-Out',
                onTap: () => _go(context, CheckOutPage.route),
              ),
              _ActionCard(
                icon: Icons.contact_phone,
                label: 'Contact Info',
                onTap: () => _go(context, ContactInfoPage.route),
              ),
            ];

            if (isWide) {
              return Center(
                child: ConstrainedBox(
                  constraints: const BoxConstraints(maxWidth: 900),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      classPicker,
                      const SizedBox(height: 16),
                      Expanded(
                        child: GridView.count(
                          crossAxisCount: 3,
                          crossAxisSpacing: 16,
                          mainAxisSpacing: 16,
                          children: cards,
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }

            return Column(
              children: [
                classPicker,
                const SizedBox(height: 16),
                _ActionCard(
                  icon: Icons.login,
                  label: 'Check-In',
                  onTap: () => _go(context, CheckInPage.route),
                ),
                const SizedBox(height: 12),
                _ActionCard(
                  icon: Icons.logout,
                  label: 'Check-Out',
                  onTap: () => _go(context, CheckOutPage.route),
                ),
                const SizedBox(height: 12),
                _ActionCard(
                  icon: Icons.contact_phone,
                  label: 'Contact Info',
                  onTap: () => _go(context, ContactInfoPage.route),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}

class _ActionCard extends StatelessWidget {
  final IconData icon;
  final String label;
  final VoidCallback onTap;

  const _ActionCard({
    required this.icon,
    required this.label,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 1,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(icon, size: 48),
                const SizedBox(height: 12),
                Text(
                  label,
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
